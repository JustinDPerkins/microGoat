AWSTemplateFormatVersion: '2010-09-09'
Description: Public S3 Bucket Created. Contains the source Orders PDF.

Resources:
  WareHouseOrders:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WareHousePolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: 'WareHouseOrders'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: 'WareHouseOrders'
                  - '/*' 

  UploadObjectLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt UploadObjectLambdaFunctionRole.Arn
      FunctionName: UploadObjectLambdaFunction
      Environment:
        Variables:
          BUCKET_NAME: !Ref WareHouseOrders
      Runtime: python3.8
      Timeout: 60
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import os
          import urllib.request
          import boto3
          from botocore.exceptions import ClientError
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              s3_client = boto3.client('s3')
              logger.info("Lambda function started...")
              bucket_name = os.environ['BUCKET_NAME']

              try:
                  object_key = event['ResourceProperties']['ObjectKey']
                  source_url = event['ResourceProperties']['SourceUrl']
                  request_type = event['RequestType']

                  logger.info(f"Request Type: {request_type}")
                  logger.info(f"Object Key: {object_key}")
                  logger.info(f"Source URL: {source_url}")

                  if request_type == 'Create' or request_type == 'Update':
                      # Download the object from the source URL
                      response = urllib.request.urlopen(source_url)
                      object_data = response.read()

                      # Upload the object to S3 in the "downloads" prefix
                      s3_client.put_object(Body=object_data, Bucket=bucket_name, Key=f'downloads/{object_key}', ContentType='application/pdf', ContentDisposition='inline')

                      # Send a success signal
                      response_data = {'Status': 'SUCCESS', 'ObjectKey': object_key}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

                  elif request_type == 'Delete':
                      # Delete all objects from the S3 when handling a delete stack event
                      resource_s3 = boto3.resource('s3')
                      bucket = resource_s3.Bucket(bucket_name)
                      bucket.objects.all().delete()
                      #s3_client.delete_object(Bucket=bucket_name, Key=f'downloads/{object_key}')

                      # Send a success signal for the delete event
                      response_data = {'Status': 'SUCCESS', 'ObjectKey': bucket_name}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

                  else:
                      # Unsupported request type
                      raise ValueError(f"Unsupported request type: {request_type}")

              except Exception as e:
                  # Send a failure signal with the error message
                  logger.error(f"Error: {str(e)}")
                  response_data = {'Status': 'FAILED', 'Reason': str(e)}
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  UploadObjectLambdaFunctionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - "WareHousePolicy"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UploadObjectLambdaFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub "arn:aws:s3:::${WareHouseOrders}"
                  - !Sub "arn:aws:s3:::${WareHouseOrders}/*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: "*"

  InvokeLambdaCustomResource:
    Type: "Custom::InvokeLambda"
    DependsOn:
      - "WareHousePolicy"
    Properties:
      ServiceToken: !GetAtt UploadObjectLambdaFunction.Arn
      ObjectKey: "DUNDER_PROPOSAL_REQUEST_FORM.pdf"
      SourceUrl: "https://immersionday-workshops-trendmicro.s3.amazonaws.com/dundermifflen/dunderbucketfile/DUNDER_PROPOSAL_REQUEST_FORM.pdf"
      DependsOn: UploadObjectLambdaFunction 

Outputs:
  DunderMifflinBucket:
    Description: Dunder Mifflen Ware House Orders Bucket
    Value: !Ref WareHouseOrders