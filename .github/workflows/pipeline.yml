name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FRONTEND_CONTAINER_NAME: "frontend"
  BACKEND_CONTAINER_NAME: "backend"
  TERMINAL_CONTAINER_NAME: "terminal"
  LAZYMODE_CONTAINER_NAME: "lazymode"
  ORDERS_CONTAINER_NAME: "orders"
  AWS_DEFAULT_REGION: "us-east-1"
  CFN_TEMPLATES_FOLDER: "templates/aws"
  RELEASE: "latest"
  STACK_NAME: "boringpaperco"
  AMAAS_URL: "antimalware.us-1.cloudone.trendmicro.com:443"

permissions:
  id-token: write
  contents: read

jobs:
  frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag & Push
        run: |
          docker build -t ${{ env.FRONTEND_CONTAINER_NAME }}:${{ env.RELEASE }} frontend/
          docker tag ${{ env.FRONTEND_CONTAINER_NAME }}:${{ env.RELEASE }} ${{ secrets.ECR }}/${{ env.FRONTEND_CONTAINER_NAME }}:${{ env.RELEASE }}
          docker push ${{ secrets.ECR }}/${{ env.FRONTEND_CONTAINER_NAME }}:${{ env.RELEASE }}

  backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag & Push
        run: |
          docker build -t ${{ env.BACKEND_CONTAINER_NAME }}:${{ env.RELEASE }} backend/
          docker tag ${{ env.BACKEND_CONTAINER_NAME }}:${{ env.RELEASE }} ${{ secrets.ECR }}/${{ env.BACKEND_CONTAINER_NAME }}:${{ env.RELEASE }}
          docker push ${{ secrets.ECR }}/${{ env.BACKEND_CONTAINER_NAME }}:${{ env.RELEASE }}

  terminal:
    name: Build & Push Terminal
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag & Push
        run: |
          docker build -t ${{ env.TERMINAL_CONTAINER_NAME }}:${{ env.RELEASE }} terminal/
          docker tag ${{ env.TERMINAL_CONTAINER_NAME }}:${{ env.RELEASE }} ${{ secrets.ECR }}/${{ env.TERMINAL_CONTAINER_NAME }}:${{ env.RELEASE }}
          docker push ${{ secrets.ECR }}/${{ env.TERMINAL_CONTAINER_NAME }}:${{ env.RELEASE }}

  lazymode:
    name: Build & Push LazyMode
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag & Push
        run: |
          docker build -t ${{ env.LAZYMODE_CONTAINER_NAME }}:${{ env.RELEASE }} lazymode/
          docker tag ${{ env.LAZYMODE_CONTAINER_NAME }}:${{ env.RELEASE }} ${{ secrets.ECR }}/${{ env.LAZYMODE_CONTAINER_NAME }}:${{ env.RELEASE }}
          docker push ${{ secrets.ECR }}/${{ env.LAZYMODE_CONTAINER_NAME }}:${{ env.RELEASE }}

  orders:
    name: Build & Push Orders
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, Tag & Push
        run: |
          docker build -t ${{ env.ORDERS_CONTAINER_NAME }}:${{ env.RELEASE }} orders/
          docker tag ${{ env.ORDERS_CONTAINER_NAME }}:${{ env.RELEASE }} ${{ secrets.ECR }}/${{ env.ORDERS_CONTAINER_NAME }}:${{ env.RELEASE }}
          docker push ${{ secrets.ECR }}/${{ env.ORDERS_CONTAINER_NAME }}:${{ env.RELEASE }}

  deploy:
    name: Deploy CFN Stack
    runs-on: ubuntu-latest
    needs: [frontend, backend, terminal, lazymode, orders]
    environment: Production
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_GH_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Deploy CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.STACK_NAME }}
          template: ${{ env.CFN_TEMPLATES_FOLDER }}/main.template.yaml
          capabilities: CAPABILITY_IAM
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            FrontendImage=${{ secrets.ECR }}/${{ env.FRONTEND_CONTAINER_NAME }}:${{ env.RELEASE }},
            BackendImage=${{ secrets.ECR }}/${{ env.BACKEND_CONTAINER_NAME }}:${{ env.RELEASE }},
            TerminalImage=${{ secrets.ECR }}/${{ env.TERMINAL_CONTAINER_NAME }}:${{ env.RELEASE }},
            LazyModeImage=${{ secrets.ECR }}/${{ env.LAZYMODE_CONTAINER_NAME }}:${{ env.RELEASE }},
            OrdersImage=${{ secrets.ECR }}/${{ env.ORDERS_CONTAINER_NAME }}:${{ env.RELEASE }},
            AmaasURL=${{ env.AMAAS_URL }},
            APIKey=${{ secrets.V1_API_KEY }},
            MyIP=${{ secrets.IP_ADDRESS }},
            LaunchType=${{ secrets.LAUNCH_TYPE }}
